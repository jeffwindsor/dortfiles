#!/usr/bin/env bash

# Aliases
alias ....='cd ../../../'
alias ...='cd ../../'
alias ..='cd ..'
alias business="cd \$SRC/github.com/jeffwindsor/financials/gnucash/business/imports"
alias dot="cd \$DOTFILES"
alias home="cd \$SRC/github.com/jeffwindsor/financials/gnucash/home/imports"
alias hub="cd \$SRC/github.com"
alias in="cd \$INSTALLS"
alias jeff="cd \$SRC/github.com/jeffwindsor/"
alias md="cd \$HOME/portable/exocortex/markdown"
alias src="cd \$SRC"

alias hubs="exec-on-git-repos cd \$SRC/github.com/"
alias srcs="exec-on-git-repos cd \$SRC"
alias theme="\$XDG_CONFIG_HOME/alacritty/change_theme"
alias zs="\$EDITOR -c \":args \$HOME/.zshrc \$HOME/.zshenv \$HOME/.bashrc\""

if command -v bat &>/dev/null
then
  alias cat='bat --style=plain'
fi

# dotfile management
if command -v yadm &>/dev/null
then
  function yadm-list() {
    yadm list -a | sd '^' "$HOME/"
  }
  function yadm-commit(){
    yadm commit -m "${1:-'Refactor'}"
  }
  function yadm-commit-push(){
    yadm commit -m "${1:-'Refactor'}" && yadm push
  }
  function yadm-add-modified-commit-push(){
    yadm add -u && yadm-commit "$1" && yadm push
  }
  function yadm-log-graph(){
    yadm log --graph --pretty=format:"${GIT_LOG_PRETTY_FORMAT}" --abbrev-commit --max-count="${1:-10}"
  }

  # `d` for dotifles
  alias d="yadm"
  alias dg="lazygit -ucd ~/.local/share/yadm/lazygit -w ~ -g ~/.local/share/yadm/repo.git"  #lazygit to yadm bare repo
  alias change="\$EDITOR -c \":args \$HOME/.config/installs/nixos/*.nix\""
  alias stow="yadm add \$HOME/.config/installs/nixos/**/*.nix"

  alias da="yadm add"
  alias daa="yadm add -u"       #stage modified and deletions
  alias dcm="yadm-commit"
  alias dl="yadm-log-graph"
  alias dll="yadm log"
  alias dph="yadm push"
  alias dpl="yadm pull"
  alias dr="yadm remote -vv"
  alias ds="yadm status -sb --ignore-submodules"
  alias dup="yadm-add-modified-commit-push"

fi

# grep
if command -v rg &>/dev/null; then
  alias grep='rg'
  alias ar='alias | rg'
fi

# list
if command -v exa &>/dev/null; then
  alias l='exa -F --group-directories-first'
  alias la='exa -F --group-directories-first --git --all'
  alias ll='exa -lF --group-directories-first'
  alias lla='exa -lF --group-directories-first --git --all'
  alias tree='exa --tree --git'
  alias treea='exa -lF --tree --git --all'
else
  alias l='ls'
  alias la='ls -a'
  alias ll='ls -l'
  alias lla='ls -la'
fi

if command -v freshfetch &>/dev/null; then
  alias f='freshfetch'
fi

# source control
if command -v git &>/dev/null; then

  # git commit with a default comment of 'Refactor'
  function git-commit(){
    git commit -m "${1:-'Refactor'}"
  }
  function git-add-commit(){
    git add --all && git-commit "$1"
  }
  function git-add-commit-push(){
    git-add-commit "$1" && git push
  }
  # pretty git log using format set in .zshenv: GIT_LOG_PRETTY_FORMAT. Max count defaults to 10
  function git-log-graph(){
    git log --graph --pretty=format:"${GIT_LOG_PRETTY_FORMAT}" --abbrev-commit --max-count="${1:-10}"
  }
  # find all directories ending in .git (including hidden and ignored listings)
  function git-find-dirs(){
    fd '^.git$' "$1" -HItd --max-depth 4 | sed 's/.git\/$//'
  }
  # apply git command to current directory contents
  function git-all(){
    echo "git $1 on sub-directories"
    find . -maxdepth 1 -type d -exec git -C {} "$1" \;
    # ls | xargs -I{} echo git -C {} $1
  }
  # prompt user to select from list of git directories under $2 and if user selects one, execute command $1 on it
  function exec-on-git-repos() {
    local result
    result=$(git-find-dirs "$2" | fzf --reverse)
    [ -n "$result" ] && "$1" "$result"
  }
  # git clone from git hub to my source directory
  function ghc(){
    git clone git@github.com:"$1" "$SRC"/github.com/"$1"
  }

  alias git-to-main="git branch -m master main && git push -u origin main"
  alias ga="git add"
  alias gaa="git add --all"
  alias gb="git branch -v"
  alias gc="git clone"
  alias gcm="git-commit"
  alias gcma="git add --all && git-commit"
  alias gco="git checkout"
  alias gd="git diff --ignore-space-at-eol -b -w --ignore-blank-lines"
  alias gl="git-log-graph"
  alias gll="git log"
  alias gph="git push"
  alias gpl="git pull"
  alias gpls="git-all pull"
  alias gr="git remote -vv"
  alias gs="git status -sb --ignore-submodules"
  alias gup="git-add-commit-push"
  alias gsync="git checkout master && git pull --rebase && git checkout - && git rebase master"
fi
if command -v gitui &>/dev/null; then
  alias gu=gitui
fi
if command -v lazygit &>/dev/null; then
  alias lg=lazygit
fi

# editors
if command -v hx &>/dev/null; then
  alias h='hx'
  alias hexo='hx ~/portable/exocortex'
  alias hfins="nvim -c \":Telescope find_files cwd=\$HOME/portable/financials\""
  alias hconfigs="nvim -c \":Telescope find_files cwd=\$XDG_CONFIG_HOME\""
  # alias dots="nvim -c \":Telescope find_files find_command=\$HOME/.config/yadm-list.sh\""
  alias hdots="yadm list --all | fzf | xargs nvim"
  alias hins="nvim -c \":Telescope find_files cwd=\$INSTALLS\""
  
fi
if command -v nvim &>/dev/null; then
  # yadm list -a | sd '^' "$HOME/"

  alias v='nvim'
  alias fins="nvim -c \":Telescope find_files cwd=\$HOME/portable/financials\""
  alias configs="nvim -c \":Telescope find_files cwd=\$XDG_CONFIG_HOME\""
  # alias dots="nvim -c \":Telescope find_files find_command=\$HOME/.config/yadm-list.sh\""
  alias dots="yadm list --all | fzf | xargs nvim"
  alias ins="nvim -c \":Telescope find_files cwd=\$INSTALLS\""
fi

# version manager
# if command -v rtx &>/dev/null; then
#   eval "$(rtx activate zsh)"
#   alias ri="rtx install"
#   alias rl="rtx list"
#   alias ru="rtx use"
# fi
if command -v fnm &>/dev/null; then
  eval "$(fnm env --use-on-cd)"
fi

#
# Operating System Specific Settings
#

# MACOS / DARWIN
if [[ $(uname) == "Darwin" ]]; then
  # macos ls colorized
  export CLICOLOR=1

  # cj
  alias lab="cd \$SRC/gitlab.cj.dev"
  alias labs="exec-on-git-repos cd \$SRC/gitlab.cj.dev"
  alias cj="\$EDITOR \$HOME/portable/exocortex/cj"
  alias dbstart="nohup VBoxHeadless --startvm \"Oracle11g32\" &> /dev/null &"
  alias dbstop="VBoxManage controlvm Oracle11g32 poweroff"
  alias emp="cd \$SRC/gitlab.cj.dev/empire"
  alias emps="exec-on-git-repos cd \$SRC/gitlab.cj.dev/empire"
  alias java8="sdk use java 8.302.08.1-amzn"
  alias qb="java8 && mvn clean install -T 1C -Ddelta.skip=true -Dcleanup.skip=true -Dqunit.numThreads=8 -DskipTests -Dtablespaces.skip=true -Dgulp.task=min && java11"
  alias qqb="java8 && mvn install -T 1C -Ddelta.skip=true -Dcleanup.skip=true -Dqunit.numThreads=8 -DskipTests -Dtablespaces.skip=true -Dgulp.task=min && java11"
  alias sdk-start="source \$HOME/.sdkman/bin/sdkman-init.sh"
  alias shopcart="rlwrap sqlplus jwindsor@shopcart.db.cj.com:1531/shopcart"
  alias shuttle-init="\$HOME/.local/scripts/cj/shuttle-init"
  alias t1="rlwrap sqlplus cj@tcjoweb1.db.cj.com:1521/tcjoweb1"
  alias t5="rlwrap sqlplus cj@tcjoweb5.db.cj.com:1521/tcjoweb5"
  alias test-schemas="java -jar ./target/schemas-main-SNAPSHOT.one-jar.jar locator=T5 tnsnames=/USers/jwindsor/.local/cjdev/ci/tns-admin/tnsnames.ora"
  alias tns="v ~/.local/cjdev/ci/tns-admin/tnsnames.ora"
  alias nvm=fnm

  # fzf
  [[ ! "$PATH" == */usr/local/opt/fzf/bin* ]] && export PATH="${PATH:+${PATH}:}/usr/local/opt/fzf/bin"

  # sdkman
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# FEDORA (all flavors)
elif command dnf &>/dev/null; then
  # dnf package manager
  alias da="sudo dnf autoremove"
  alias df="sudo dnf info"
  alias di="sudo dnf install"
  alias dit="sudo dnf --enablerepo=updates-testing,updates-testing-modular --best install"
  alias dls="dnf history --userinstalled"
  alias up="sudo dnf upgrade"
  # alias change="$EDITOR $HOME/.config/installs/fedora"

# NIXOS
elif [ -d "/etc/nixos" ]; then
  # generate a hardware config : sudo nixos-generate-config
  alias clean="nix-env --delete-generations +7 && nix-collect-garbage"
  alias list="sudo nix-env --list-generations --profile /nix/var/nix/profiles/system"
  alias optimize="nix store optimise"
  alias rebuild="sudo cp -r \$HOME/.config/installs/nixos/*.nix /etc/nixos/ && sudo nixos-rebuild switch"
  alias shell="nix-shell --command zsh"
  alias up="sudo nixos-rebuild switch --upgrade"

  # function to create a new default file for nix-shell command
  function nix-init-shell(){
    cat > shell.nix << EOL
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
  # shell packages
  nativeBuildInputs = with pkgs; [

  ];

  # hook executed on shell start
  # shellHook = ''
  #   echo "Welcome to your new Nix Shell"
  # '';

  # environment variables can be set directly
  # COLOR = "green";

  # as well as importing other nix files
  # import ./password.nix;
}
EOL
  }
  # NOTE: zsh plugins are set up in configuration.nix
fi


